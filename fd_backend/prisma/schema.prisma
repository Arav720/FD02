generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  createdAt     DateTime       @default(now())
  cognitoId     String         @unique
  firstName     String?
  isActive      Boolean        @default(true)
  lastName      String?
  password      String?
  phoneNumber   String?
  profilePhoto  String?
  provider      ProviderType   @default(COGNITO)
  role          UserRole       @default(STUDENT)
  updatedAt     DateTime       @updatedAt
  bookings      Booking[]
  complaints    Complaint[]
  notifications Notification[]
  payments      Payment[]
  reviews       Review[]
  transactions  Transaction[]

  @@index([email])
  @@index([cognitoId])
}

model Librarian {
  id                       String         @id @default(uuid())
  username                 String         @unique
  email                    String         @unique
  profilePhoto             String?
  contactNumber            String?
  address                  String?
  profileCompleted         Boolean        @default(false)
  createdAt                DateTime       @default(now())
  alternateContactNumber   String?
  city                     String?
  cognitoId                String         @unique
  country                  String         @default("India")
  dateOfBirth              DateTime?
  firstName                String?
  isActive                 Boolean        @default(true)
  lastName                 String?
  password                 String?
  pincode                  String?
  provider                 ProviderType   @default(COGNITO)
  role                     UserRole       @default(LIBRARIAN)
  state                    String?
  updatedAt                DateTime       @updatedAt
  aadhaarNumber            String?
  accountHolderName        String?
  addressProofType         String?
  addressProofUrl          String?
  bankAccountNumber        String?
  bankIfsc                 String?
  bankName                 String?
  gstin                    String?
  kycRejectedAt            DateTime?
  kycSubmittedAt           DateTime?
  kycVerifiedAt            DateTime?
  panNumber                String?
  razorpayAccountId        String?        @unique
  razorpayAccountStatus    String?
  razorpayKycFailureReason String?
  razorpayKycStatus        String?
  libraries                Library[]
  notifications            Notification[]
  payments                 Payment[]
  transactions             Transaction[]

  @@index([email])
  @@index([cognitoId])
}

model Library {
  id             String         @id @default(uuid())
  libraryName    String
  address        String
  city           String
  state          String
  pincode        String
  googleMapLink  String?
  country        String         @default("India")
  photos         String[]
  totalSeats     Int
  openingTime    String
  closingTime    String
  createdAt      DateTime       @default(now())
  librarianId    String
  contactNumber  String
  description    String?
  facilities     String[]
  isActive       Boolean        @default(true)
  updatedAt      DateTime       @updatedAt
  whatsAppNumber String?
  reviewStatus   ReviewStatus   @default(APPROVED)
  area           String?
  bookings       Booking[]
  complaints     Complaint[]
  faqs           Faq[]
  librarian      Librarian      @relation(fields: [librarianId], references: [id], onDelete: Cascade)
  plans          LibraryPlan[]
  notifications  Notification[]
  reviews        Review[]
  seats          Seat[]
  socialLinks    SocialLink[]
  timeSlots      TimeSlot[]

  @@index([librarianId])
  @@index([city, state])
}

model TimeSlot {
  id          String         @id @default(uuid())
  startTime   String
  endTime     String
  date        DateTime
  capacity    Int            @default(0)
  bookedCount Int            @default(0)
  status      TimeSlotStatus @default(AVAILABLE)
  libraryId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bookings    Booking[]
  library     Library        @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@unique([libraryId, date, startTime, endTime])
  @@index([libraryId])
  @@index([date])
}

model Seat {
  id         String     @id @default(uuid())
  status     SeatStatus @default(AVAILABLE)
  isActive   Boolean    @default(true)
  libraryId  String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  seatNumber Int
  bookings   Booking[]
  library    Library    @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@unique([libraryId, seatNumber])
  @@index([libraryId])
  @@index([status])
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  url       String
  isActive  Boolean  @default(true)
  libraryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@unique([libraryId, platform])
  @@index([libraryId])
}

model LibraryPlan {
  id          String    @id @default(uuid())
  planType    String
  description String?
  libraryId   String
  createdAt   DateTime  @default(now())
  days        Int
  isActive    Boolean   @default(true)
  months      Int
  planName    String
  price       Decimal   @db.Decimal(10, 2)
  updatedAt   DateTime  @updatedAt
  hours       Int
  bookings    Booking[]
  library     Library   @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@index([libraryId])
  @@index([planType])
}

model Booking {
  id           String        @id @default(uuid())
  studentId    String
  planId       String
  checkInTime  DateTime?
  checkOutTime DateTime?
  createdAt    DateTime      @default(now())
  libraryId    String
  seatId       String
  status       BookingStatus @default(ACTIVE)
  timeSlotId   String
  totalAmount  Decimal       @db.Decimal(10, 2)
  updatedAt    DateTime      @updatedAt
  validFrom    DateTime
  validTo      DateTime
  library      Library       @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  plan         LibraryPlan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  seat         Seat          @relation(fields: [seatId], references: [id], onDelete: Cascade)
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  timeSlot     TimeSlot      @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([studentId])
  @@index([libraryId])
  @@index([status])
  @@index([validFrom, validTo])
}

model Transaction {
  id                 String        @id @default(uuid())
  amount             Decimal       @db.Decimal(10, 2)
  createdAt          DateTime      @default(now())
  librarianId        String?
  studentId          String?
  bookingId          String?
  description        String?
  paymentId          String?
  paymentMethod      PaymentMethod
  paymentStatus      PaymentStatus @default(PENDING)
  refundId           String?
  updatedAt          DateTime      @updatedAt
  razorpayPaymentId  String?
  razorpayTransferId String?
  transferMeta       Json?
  transferStatus     String?
  booking            Booking?      @relation(fields: [bookingId], references: [id])
  librarian          Librarian?    @relation(fields: [librarianId], references: [id])
  student            Student?      @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([librarianId])
  @@index([paymentStatus])
  @@index([createdAt])
}

model Payment {
  id                 String             @id @default(uuid())
  amount             Decimal            @db.Decimal(10, 2)
  platformFee        Decimal            @default(0) @db.Decimal(10, 2)
  currency           String             @default("INR")
  razorpayOrderId    String             @unique
  razorpayPaymentId  String?
  razorpaySignature  String?
  razorpayTransferId String?
  status             PaymentOrderStatus @default(CREATED)
  paymentDate        DateTime?
  studentId          String
  librarianId        String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  librarian          Librarian          @relation(fields: [librarianId], references: [id], onDelete: Cascade)
  student            Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([librarianId])
  @@index([status])
  @@index([razorpayOrderId])
  @@index([paymentDate])
}

model Review {
  id        String       @id @default(uuid())
  stars     Int          @default(1)
  comment   String?
  status    ReviewStatus @default(PENDING)
  isActive  Boolean      @default(true)
  studentId String
  libraryId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  library   Library      @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  student   Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, libraryId])
  @@index([libraryId])
  @@index([stars])
}

model Complaint {
  id         String          @id @default(uuid())
  complaint  String
  status     ComplaintStatus @default(PENDING)
  resolution String?
  resolvedAt DateTime?
  studentId  String
  libraryId  String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  library    Library         @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  student    Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([libraryId])
  @@index([status])
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  libraryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@index([libraryId])
  @@index([order])
}

model Notification {
  id          String           @id @default(uuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  studentId   String?
  librarianId String?
  libraryId   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  librarian   Librarian?       @relation(fields: [librarianId], references: [id], onDelete: Cascade)
  library     Library?         @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  student     Student?         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([librarianId])
  @@index([isRead])
  @@index([type])
}

enum UserRole {
  STUDENT
  LIBRARIAN
  ADMIN
}

enum ProviderType {
  COGNITO
  GOOGLE
  FACEBOOK
}

enum BookingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  BANK_TRANSFER
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SeatStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum PaymentOrderStatus {
  CREATED
  ATTEMPTED
  PAID
  FAILED
  TRANSFERRED
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_REMINDER
  LIBRARY_UPDATE
  MAINTENANCE_ALERT
}
