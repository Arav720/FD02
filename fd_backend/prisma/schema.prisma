generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for better type safety
enum UserRole {
  STUDENT
  LIBRARIAN
  ADMIN
}

enum ProviderType {
  COGNITO
  GOOGLE
  FACEBOOK
}

enum BookingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  BANK_TRANSFER
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SeatStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_REMINDER
  LIBRARY_UPDATE
  MAINTENANCE_ALERT
}

// Core User Models
model Student {
  id        String       @id @default(uuid())
  cognitoId String       @unique
  username  String       @unique
  email     String       @unique
  password  String? // Optional for OAuth
  provider  ProviderType @default(COGNITO)
  role      UserRole     @default(STUDENT)

  // Profile Information
  firstName    String?
  lastName     String?
  phoneNumber  String?
  profilePhoto String?
  isActive     Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings      Booking[]
  transactions  Transaction[]
  reviews       Review[]
  complaints    Complaint[]
  notifications Notification[]

  @@index([email])
  @@index([cognitoId])
}

model Librarian {
  id        String       @id @default(uuid())
  cognitoId String       @unique
  username  String       @unique
  email     String       @unique
  password  String?
  provider  ProviderType @default(COGNITO)
  role      UserRole     @default(LIBRARIAN)

  // Profile Information
  firstName              String?
  lastName               String?
  profilePhoto           String?
  contactNumber          String?
  alternateContactNumber String?
  dateOfBirth            DateTime?
  profileCompleted       Boolean   @default(false)
  isActive               Boolean   @default(true)

  // Address Information
  address String?
  city    String?
  state   String?
  pincode String?
  country String  @default("India")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Razorpay integration
  razorpayAccountId        String? @unique // Linked account ID from Razorpay
  razorpayKycStatus        String? // "pending", "submitted", "verified", "rejected"
  razorpayKycFailureReason String? // If KYC fails, the error message from Razorpay
  razorpayAccountStatus    String? // "created", "activated", "suspended", etc.

  // Bank/KYC Details (stored securely, maybe encrypted)
  bankAccountNumber String?
  bankIfsc          String?
  bankName          String?
  accountHolderName String?
  panNumber         String?
  gstin             String?
  aadhaarNumber     String?
  addressProofType  String? // Document type, e.g., "AADHAAR", "VOTER_ID"
  addressProofUrl   String? // Link to uploaded document (optional)

  // Timestamps to track KYC submission changes (optional but helpful)
  kycSubmittedAt DateTime?
  kycVerifiedAt  DateTime?
  kycRejectedAt  DateTime?
  // Relations
  libraries      Library[]
  transactions   Transaction[]
  notifications  Notification[]

  @@index([email])
  @@index([cognitoId])
}

// Library Management
model Library {
  id             String       @id @default(uuid())
  libraryName    String
  contactNumber  String
  whatsAppNumber String?
  address        String
  city           String
  state          String
  pincode        String
  country        String       @default("India")
  area           String?
  googleMapLink  String?
  photos         String[]
  totalSeats     Int
  openingTime    String
  closingTime    String
  reviewStatus   ReviewStatus @default(APPROVED)
  isActive       Boolean      @default(true)
  description    String?
  facilities     String[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  librarianId String
  librarian   Librarian @relation(fields: [librarianId], references: [id], onDelete: Cascade)

  plans         LibraryPlan[]
  bookings      Booking[]
  timeSlots     TimeSlot[]
  seats         Seat[]
  reviews       Review[]
  complaints    Complaint[]
  socialLinks   SocialLink[]
  faqs          Faq[]
  notifications Notification[]

  @@index([librarianId])
  @@index([city, state])
}

// Time Slot Management
model TimeSlot {
  id          String         @id @default(uuid())
  startTime   String // Format: "09:00"
  endTime     String // Format: "17:00"
  date        DateTime
  capacity    Int            @default(0)
  bookedCount Int            @default(0)
  status      TimeSlotStatus @default(AVAILABLE)

  // Relations
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  bookings Booking[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([libraryId, date, startTime, endTime])
  @@index([libraryId])
  @@index([date])
}

// Seat Management
model Seat {
  id         String     @id @default(uuid())
  seatNumber String
  status     SeatStatus @default(AVAILABLE)
  isActive   Boolean    @default(true)

  // Relations
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  bookings Booking[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([libraryId, seatNumber])
  @@index([libraryId])
  @@index([status])
}

// Social Links
model SocialLink {
  id       String  @id @default(uuid())
  platform String // e.g., "facebook", "instagram", "twitter"
  url      String
  isActive Boolean @default(true)

  // Relations
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([libraryId, platform])
  @@index([libraryId])
}

// Library Plans
model LibraryPlan {
  id          String  @id @default(uuid())
  planName    String
  hours       Int // Number of hours
  days        Int // Number of days
  months      Int // Number of months  
  price       Decimal @db.Decimal(10, 2)
  planType    String // e.g., "daily", "weekly", "monthly"
  description String?
  isActive    Boolean @default(true)

  // Relations
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  bookings Booking[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([libraryId])
  @@index([planType])
}

// Booking System
model Booking {
  id           String        @id @default(uuid())
  status       BookingStatus @default(ACTIVE)
  checkInTime  DateTime?
  checkOutTime DateTime?
  validFrom    DateTime
  validTo      DateTime
  totalAmount  Decimal       @db.Decimal(10, 2)

  // Relations
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  planId String
  plan   LibraryPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  timeSlotId String
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  seatId String
  seat   Seat   @relation(fields: [seatId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([libraryId])
  @@index([status])
  @@index([validFrom, validTo])
}

// Transaction Management
model Transaction {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String? // External payment gateway ID
  refundId      String? // Refund transaction ID
  description   String?

  // Relations
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: SetNull)

  librarianId String?
  librarian   Librarian? @relation(fields: [librarianId], references: [id], onDelete: SetNull)

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  razorpayPaymentId  String? // The Payment ID from Razorpay for the booking
  razorpayTransferId String? // The Transfer ID for the Route payout
  transferStatus     String? // e.g., "pending", "processed", "failed"
  transferMeta       Json? // Store full transfer API response for debugging
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([studentId])
  @@index([librarianId])
  @@index([paymentStatus])
  @@index([createdAt])
}

// Review System
model Review {
  id       String       @id @default(uuid())
  stars    Int          @default(1) // 1-5 rating
  comment  String?
  status   ReviewStatus @default(PENDING)
  isActive Boolean      @default(true)

  // Relations
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, libraryId]) // One review per student per library
  @@index([libraryId])
  @@index([stars])
}

// Complaint System
model Complaint {
  id         String          @id @default(uuid())
  complaint  String
  status     ComplaintStatus @default(PENDING)
  resolution String?
  resolvedAt DateTime?

  // Relations
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([libraryId])
  @@index([status])
}

// FAQ System
model Faq {
  id       String  @id @default(uuid())
  question String
  answer   String
  isActive Boolean @default(true)
  order    Int     @default(0)

  // Relations
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([libraryId])
  @@index([order])
}

// Notification System
model Notification {
  id      String           @id @default(uuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)

  // Relations
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  librarianId String?
  librarian   Librarian? @relation(fields: [librarianId], references: [id], onDelete: Cascade)

  libraryId String?
  library   Library? @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([librarianId])
  @@index([isRead])
  @@index([type])
}
